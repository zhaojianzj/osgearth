/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2015 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TERRAIN_TILE_NODE_H
#define OSGEARTH_TERRAIN_TILE_NODE_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osg/MatrixTransform>
#include <osg/Texture>

namespace osgEarth
{
    /**
     * Base class for a terrain engine's representation of a tile.
     * This is largely for internal use and subject to change, so
     * be careful relying on the structure of this object.
     */
    class /*header-only*/ TerrainTileNode // : public osg::MatrixTransform
    {
    public:
        virtual const TileKey& getKey() const =0;

        virtual osg::Texture* getElevationTexture() const =0;

        virtual osg::RefMatrixf* getElevationTextureMatrix() const =0;

        virtual osg::Texture* getNormalTexture() const =0;

        virtual osg::RefMatrixf* getNormalTextureMatrix() const =0;

        virtual osg::Group* getPayloadGroup() const =0;

        virtual osg::Group* getOrCreatePayloadGroup() =0;

    protected:
        virtual ~TerrainTileNode() { }
    };

    /**
     * Interface for notification of the creation of TerrainTileNodes by
     * the terrain engine.
     */
    class /*header-only*/ TerrainTileNodeBroker
    {
    public:
        /**
         * Terrain engine calls this when it finishes creating a single tile node
         * for a given tile key. (Typically that will happen in a pager thread.)
         */
        virtual void notifyOfTerrainTileNodeCreation(const TileKey& key, osg::Node* node) =0;

    public:
        virtual ~TerrainTileNodeBroker() { }
    };

    /**
     * Callback you can install on a TerrainEngineNode to get a first look at
     * a TerrainTileNode when it's created.
     */
    class /*header-only*/ TerrainTileNodeCallback : public osg::Referenced
    {
    public:
        // Careful: runs in a terrain engine background thread.
        virtual void operator()(const TileKey& key, osg::Node* tileNode) =0;

    protected:
        virtual ~TerrainTileNodeCallback() { }
    };
};

#endif // OSGEARTH_TILE_NODE_H
