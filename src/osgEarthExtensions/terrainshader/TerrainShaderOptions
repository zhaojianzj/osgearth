/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2015 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_EXT_TERRAIN_SHADER_OPTIONS
#define OSGEARTH_EXT_TERRAIN_SHADER_OPTIONS 1

#include <osgEarth/Config>
#include <osgEarth/URI>
#include <vector>

namespace osgEarth { namespace TerrainShader
{
    using namespace osgEarth;

    /**
     * Options for applying an inline shader to the terrain.
     */
    class TerrainShaderOptions : public DriverConfigOptions // NO EXPORT; header only
    {
    public:
        struct Code
        {
            std::string   _source;
            optional<URI> _uri;
        };

        std::vector<Code>& code() { return _code; }
        const std::vector<Code>& code() const { return _code; }

    public:
        TerrainShaderOptions( const ConfigOptions& opt =ConfigOptions() ) : DriverConfigOptions( opt )
        {
            setDriver( "terrainshader" );
            fromConfig( _conf );
        }

        virtual ~TerrainShaderOptions() { }

    public:
        Config getConfig() const {
            Config conf = DriverConfigOptions::getConfig();
            for(unsigned i=0; i<_code.size(); ++i) {
                Config c("code", _code[i]._source);
                c.addIfSet("url", _code[i]._uri);
                conf.add( c );
            }
            return conf;
        }

    protected:
        void mergeConfig( const Config& conf ) {
            DriverConfigOptions::mergeConfig( conf );
            fromConfig( conf );
        }

    private:
        void fromConfig( const Config& conf ) {
            ConfigSet s = conf.children("code");
            for(ConfigSet::const_iterator i = s.begin(); i != s.end(); ++i) {
                _code.push_back(Code());
                _code.back()._source = i->value();
                i->getIfSet("url", _code.back()._uri);
            }
        }

        std::vector<Code> _code;
    };

} } // namespace osgEarth::TerrainShader

#endif // OSGEARTH_EXT_TERRAIN_SHADER_OPTIONS

